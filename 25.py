#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime
import json
import os

class UserMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, username):
        self.username = username
        self.metrics_file = "user_metrics.json"
        self.load_existing_data()
        
    def load_existing_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if os.path.exists(self.metrics_file):
                with open(self.metrics_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if self.username in data:
                        user_data = data[self.username]
                        self.registration_date = datetime.datetime.strptime(
                            user_data['registration_date'], '%Y-%m-%d %H:%M:%S')
                        self.login_count = user_data['login_count'] + 1
                    else:
                        self.registration_date = datetime.datetime.now()
                        self.login_count = 1
            else:
                self.registration_date = datetime.datetime.now()
                self.login_count = 1
        except:
            self.registration_date = datetime.datetime.now()
            self.login_count = 1
    
    def save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            if os.path.exists(self.metrics_file):
                with open(self.metrics_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {}
                
            data[self.username] = {
                'registration_date': self.registration_date.strftime('%Y-%m-%d %H:%M:%S'),
                'login_count': self.login_count,
                'last_login': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            with open(self.metrics_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def get_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        time_in_system = datetime.datetime.now() - self.registration_date
        days_in_system = time_in_system.days
        
        return {
            "üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": self.username,
            "üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": self.registration_date.strftime('%Y-%m-%d %H:%M:%S'),
            "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤": self.login_count,
            "‚è±Ô∏è –í —Å–∏—Å—Ç–µ–º–µ": f"{days_in_system} –¥–Ω–µ–π",
            "‚≠ê –£—Ä–æ–≤–µ–Ω—å": self.get_user_level(),
            "üèÜ –°—Ç–∞—Ç—É—Å": self.get_user_status()
        }
    
    def get_user_level(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.login_count > 15:
            return "–≠–∫—Å–ø–µ—Ä—Ç"
        elif self.login_count > 8:
            return "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif self.login_count > 3:
            return "–ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            return "–ù–æ–≤–∏—á–æ–∫"
    
    def get_user_status(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.login_count > 10:
            return "–í–µ—Ç–µ—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ üèÖ"
        elif self.login_count > 5:
            return "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚ö°"
        else:
            return "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ üå±"

def print_separator():
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print("‚ïê" * 50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\nüéâ" + "‚ïê" * 46 + "üéâ")
    print("           –°–ò–°–¢–ï–ú–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø –ö–û–ú–ê–ù–î–´")
    print("üéâ" + "‚ïê" * 46 + "üéâ")
    
    print("\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   ‚Ä¢ Fedor815 - –¢–∏–º–∏–Ω–¥")
    print("   ‚Ä¢ dddll01 - –ü–∞–¥–∞–≤–∞–Ω")
    print("   ‚Ä¢ Teacher001-top - –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
    print("üåê –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/Fedor815/team")
    print_separator()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
    
    if not username:
        print("‚ùå –û—à–∏–±–∫–∞: –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ—Ç—Ä–∏–∫
    user_metrics = UserMetrics(username)
    metrics = user_metrics.get_metrics()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    user_metrics.save_metrics()
    
    # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
    print_separator()
    print("üìä –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò")
    print_separator()
    
    for key, value in metrics.items():
        print(f"{key:<20} : {value}")
    
    print_separator()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress = min(user_metrics.login_count, 10)
    progress_bar = "‚ñà" * progress + "‚ñë" * (10 - progress)
    print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: [{progress_bar}]")
    print(f"   –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: {progress * 10}%")
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    print(f"\n‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
    print("   –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ! üöÄ")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
    print_separator()
    print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ò–∑—É—á–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞")
    print("   2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Pull Request")
    print("   3. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    print_separator()

if __name__ == "__main__":
    main()